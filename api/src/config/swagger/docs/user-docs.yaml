tags:
  - name: Users
    description: "Endpoints for user management."
paths:
  /users:
    get:
      tags:
        - Users
      summary: Retrieve All Users
      description: Retrieve a comprehensive list of all registered users.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of users was successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUserList'
        default:
          description: An unexpected error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Users
      summary: Create a New User
      description: Create a new user with the provided information. The payload must adhere to validation rules.
      requestBody:
        description: User object that needs to be added.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDTO'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseCreated'
        '400':
          description: Validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Retrieve a User by ID
      description: Retrieve detailed information of a user by their unique identifier.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUser'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Users
      summary: Update an Existing User
      description: Update user details by providing new information.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier of the user to update.
          required: true
          schema:
            type: string
      requestBody:
        description: Updated user object containing new values.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDTO'
      responses:
        '204':
          description: User updated successfully (no content returned).
        '400':
          description: Validation error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Users
      summary: Delete a User
      description: Delete a user by their unique identifier. Use the query parameter `hardDelete=true` for a hard delete.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: The unique identifier of the user.
          required: true
          schema:
            type: string
        - name: hardDelete
          in: query
          description: Set to true for a hard delete.
          required: false
          schema:
            type: boolean
      responses:
        '204':
          description: User deleted successfully (no content returned).
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/email/{email}:
    get:
      tags:
        - Users
      summary: Retrieve a User by Email Address
      description: Retrieve user details using the user's email address.
      security:
        - bearerAuth: []
      parameters:
        - name: email
          in: path
          description: The email address of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponseUser'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Coordinates:
      type: object
      properties:
        lat:
          type: number
          example: 40.7128
          description: Latitude coordinate.
        lng:
          type: number
          example: -74.0060
          description: Longitude coordinate.
    CreateUserDTO:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: John Doe
          description: Full name of the user.
        email:
          type: string
          format: email
          example: john@example.com
          description: User's email address.
        password:
          type: string
          format: password
          example: Password@123
          description: User's password (must contain at least one uppercase letter, one number, and one special character).
        address:
          type: string
          example: "123 Main St"
          description: Physical address of the user.
        coordinates:
          $ref: '#/components/schemas/Coordinates'
          description: Geographical coordinates of the user.
    UpdateUserDTO:
      type: object
      properties:
        name:
          type: string
          example: John Doe
          description: Full name of the user.
        email:
          type: string
          format: email
          example: john@example.com
          description: User's email address.
        password:
          type: string
          format: password
          example: NewPass@123
          description: Updated password.
        address:
          type: string
          example: "123 Main St"
          description: Updated physical address.
        coordinates:
          $ref: '#/components/schemas/Coordinates'
          description: Updated geographical coordinates.
    UserResponseDTO:
      type: object
      properties:
        _id:
          type: string
          example: "603d2149f1c2ae3a9876f3c8"
          description: Unique identifier of the user.
        name:
          type: string
          example: John Doe
          description: Full name of the user.
        email:
          type: string
          format: email
          example: john@example.com
          description: User's email address.
        address:
          type: string
          example: "123 Main St"
          description: Physical address of the user.
        coordinates:
          $ref: '#/components/schemas/Coordinates'
          description: Geographical coordinates of the user.
        createdAt:
          type: string
          format: date-time
          example: "2023-03-11T10:20:30Z"
          description: Timestamp when the user was created.
        updatedAt:
          type: string
          format: date-time
          example: "2023-03-11T10:20:30Z"
          description: Timestamp when the user was last updated.
    ApiResponseUser:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Indicates if the operation was successful.
        message:
          type: string
          example: "User found"
          description: A descriptive message.
        data:
          type: object
          properties:
            mappedUser:
              $ref: '#/components/schemas/UserResponseDTO'
              description: Detailed user information.
    ApiResponseUserList:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Indicates if the operation was successful.
        message:
          type: string
          example: "Users found"
          description: A descriptive message.
        data:
          type: object
          properties:
            mappedUsers:
              type: array
              items:
                $ref: '#/components/schemas/UserResponseDTO'
              description: An array of user objects.
    ApiResponseCreated:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Indicates if the operation was successful.
        message:
          type: string
          example: "User created successfully"
          description: A descriptive message.
        data:
          type: object
          properties:
            id:
              type: string
              example: "603d2149f1c2ae3a9876f3c8"
              description: Unique identifier of the newly created user.
    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description: Indicates if the operation failed.
        message:
          type: string
          example: "Error message"
          description: A descriptive error message.
        error:
          type: string
          example: "ERROR_CODE"
          description: Specific error code.